What happens when you intialize a repository? Why do you need to do it?
The repository is created but the files remain untracked until the first commit is made. 
We need to do it because git init will initialise and prepare our repository for commits and other git commands like git log.

How is staging area different from the working directory and the repository? What value do you think it offers?
Sometimes we make mistakes in our actions for e.g, rm a file that we didnt intend to remove, the same goes with commit.
Staging area is different to working directory and repository because it is just an area that is preparing what we r trying to commit to the repo.
In this way, we can take the file back (unstage) to the working directory if we decide that it is not ready yet for commit.

How can you use the staging area to make sure you have one commit per logical change?
you can make sure by running "git diff --staged" and observe that these are the changed you want to be made. (this command compares the stage area with the most recent commit)

What are some situations when branches would be helpful in keeping your history organised? How would branches help?
1. opt changes that may not make it to the final productions
2. group work and collabs
branches help in a way that it doesn't affect the main branch if something goes wrong.

How do the diagrams help you visualize the branch structure?
It helps tremendously. You can see branches, unreachable commits, commits and their parents. To visualise with diagram you will get a clear understanding of the repository's structure.

What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
The result of merging two branches together is a new commit that its parent is pointing to both of the merging commits for example:
coin and master branch, we are currently in master branch. Both of these commit merges and forms a new commit that is now the new master.
We represent it in the diagram the way we do because it is alot easier to visualise each branches parents and the commit that both had before the branch split.

What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
Pros of automatic vs manual:
1. comparing conflicted code, git informs us where the conflicts are while for manual you have to make sure of it yourself.
2. safety, if there are any conflict, git does not merge it without us fixing the conflicts. In manual you can only copy and paste and hope for the best that there are no conflicts (i.e. crash).
3. you can always go back, it is true that you can also undo in manual merge but you need to make sure you know where to stop undoing. in git, it is just a simply checking out a previous commit.