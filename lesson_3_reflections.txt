When would you want to use a remote repository rather than keeping all your work local?
A good time to use a remote repository is when you either want to back up everything or collaborate with someone.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
Because there is potential loss of code if having git to automatically stay up to date with our remote repository.
Note that in order to update our remote repository we need to do commits and pushes. if Git constantly check and pull automatically from our remote repository,
then it is very difficult to do some work on future commits as the repository keeps on pulling. In addition to this, collabing with others do have similar issues.
So manually pulling changes offers more flexibilty.

Describe the differences between forks, clones, and branches. When would you use one instead of another?
Let see this from bottom to top view starting from branches.
Branch:
a branch is made up of commits in sequential order. The first commit is considered to be the root parent. You can then branch out to other branches if you need to work on something specific like a feature. 
In this way, you would not alter the main (master)branch.
Clones:
Clones are repositories you've copied from for example, GitHub. You then can work on this repository locally without the need of using internet connection. 
You can though, push the repository you've cloned online to github.
Fork:
This is basically clone except you are cloning from a repository from Github, to your own repository in Github.

What is the benefit of having a copy of the last known state of the remote stored locally?
If you are working on a solo project, you would want to know the last known state of the remote as a checkpoint. You do not want to go ahead by alot of commits incase the worst happens (pc crashed, un-recoverable, etc), so it is good to know the last checkpoint so then you can push new commits to github as back-up. 
Also it is convenient to know where you last known state is in situation such as long flights/travel where you cannot go online so that you know how much progress you've done in the project.
In addition to solo projects, it is also convenient for you to know the last known state before your colleague pushed to the repo in a collab project. In this way, you can know how much progress has been done to the project since you last pulled.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
There are multiple ways but each possesses some flaws:
1. manually code yourself and then constantly meet/communicate with your collaborators:
 - Easy:
 	you get to merge code or work together in real-time
 - Hard:
 	merging could be troublesome, depends on progress each person had done. Best way here is to make notes everytime you make changes/code
 	Communicating while working together could be trouble some since we may not see the same screen, so meeting up is best option but time needs to be convenient

2. Using Dropbox
 - Easy:
 	Code in dropbox gets updated everytime you save
 - Hard:
    Coding at the same time can cause loss of code if each party works on the same file, so communication is key and ensuring others not to work on the file you are currently working on
    
When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
The best time to make changes in a separate branch is when:
1. Adding some changes that requires approval from other collaborators
2. Working on a feature (both solo and collab)
3. Testing something new that you think it may or may not work out

A rule of thumb is to ensure everything in master is commits that are required for the project. The benefits of all the above is that you can always roll back if anything wrong occurs in the separate branch.